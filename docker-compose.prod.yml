version: '3.8'

services:
  # API Server
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: radscheduler-api:latest
    container_name: radscheduler-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      # Database - will be overridden by AWS Secrets Manager
      - DATABASE_URL=${DATABASE_URL}
      # Redis - will be overridden by AWS Secrets Manager  
      - REDIS_URL=${REDIS_URL}
      # Frontend URL
      - FRONTEND_URL=${FRONTEND_URL}
      # Twilio - will be overridden by AWS Secrets Manager
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      # Anthropic - will be overridden by AWS Secrets Manager
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Demo settings (disable in production)
      - DEMO_PHONE=${DEMO_PHONE}
      - DEMO_MODE=false
    networks:
      - radscheduler-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Mirth Connect for HL7 Processing
  mirth:
    image: nextgenhealthcare/connect:latest
    container_name: radscheduler-mirth
    restart: unless-stopped
    ports:
      - "8080:8080"  # Mirth Admin
      - "8443:8443"  # Mirth HTTPS
      - "6661:6661"  # HL7 TCP
      - "6662:6662"  # HL7 TCP
    environment:
      - MIRTH_ADMIN_PASSWORD=${MIRTH_ADMIN_PASSWORD}
      - MIRTH_KEYSTORE_PASSWORD=${MIRTH_KEYSTORE_PASSWORD}
    volumes:
      - mirth_data:/opt/connect/appdata
      - ./mirth/channels:/opt/connect/channels
    networks:
      - radscheduler-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/server/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database (for local testing - use RDS in production)
  postgres:
    image: postgres:15
    container_name: radscheduler-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=radscheduler
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - radscheduler-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d radscheduler"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache (for local testing - use ElastiCache in production)
  redis:
    image: redis:7-alpine
    container_name: radscheduler-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - radscheduler-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (for HTTPS termination)
  nginx:
    image: nginx:alpine
    container_name: radscheduler-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - radscheduler-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mirth_data:
    driver: local

networks:
  radscheduler-network:
    driver: bridge 